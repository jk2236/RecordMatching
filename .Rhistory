n.pcs <- ncol(pcs) # 5
n.gene <- length(pa.vec$gene) # 4010
n.samp <- nrow(pcs) # 124
samp.vec <- rownames(pcs)
##=======================================================================
## load expression data
##=======================================================================
load(file.path(data.dir, 'vst_50.RData')) #vst50
vst50 <- as.data.frame(t(vst50))
stopifnot(all.equal(rownames(vst50), pa.vec$e.id))
# > dim(vst50)
# [1] 4010  124
stopifnot(dim(vst50)[1] == dim(pa.vec)[1])
stopifnot(all.equal(rownames(pcs), colnames(vst50)))
# the last two cols of vst50 is e.id and gene
##=======================================================================
## Pearson correlations between gene expression and
## coordinates on Principal axes 1-5
##=======================================================================
cor.f <- file.path(data.dir, 'cor_pcs.RData')
dim(vst50)
dim(pcs)
rm(list=ls())
library(corrplot)
base.dir <- '~/Desktop/Cancer_Genomics/ImmuneProject'
data.dir <- file.path(base.dir, 'processed_data/mesomics/without_immune') #without immune cells
n.top <- 300 #number of top loading genes to retain for analysis
##=============================================
## correlation between principal axes
##=============================================
load(file.path(data.dir, 'pca.RData')) #pca.wo
pa.vec <- pca.wo$c1
# > dim(pa.vec)
# [1] 4010    5
eig.per.wo <- round((pca.wo$eig/(sum(pca.wo$eig)))*100, 2)
col <- colorRampPalette(c("blue","white","red"))(20)
pdf(file=file.path(data.dir, 'pc12_corr.pdf'), width=6, height=6)
corrplot(cor(pa.vec[,1:5]), method="color", col=col,  cl.pos="n",
type="lower", addCoef.col="black", tl.srt=0, addgrid.col='black',
tl.col="black", tl.cex=1.2, diag=FALSE, tl.offset=0.5,
number.cex=1.2, number.digits=4,
main='Without immune cells', mar =c(0, 2, 3, 0), cex.main=1.2)
dev.off()
##=============================================
## Add gene annotations to principle axes
##=============================================
gene.anno <- read.delim(file.path(base.dir, 'data/Expression/ref_annot.gtf.gene_spans'),
header=FALSE, as.is=TRUE, sep='\t')
#V1: e.id,  V6: name
# covert to gene name
pa.vec$e.id <- rownames(pa.vec)
stopifnot(all(pa.vec$e.id %in% gene.anno$V1))
pa.vec$gene <-  gene.anno$V6[match(pa.vec$e.id, gene.anno$V1)]
eid.vec <- pa.vec$e.id
gene.vec <- pa.vec$gene
##=============================================
## principal components
##=============================================
pcs <- pca.wo$l1
dim(pcs)
pcs[1,]
pca.wo$li
tmp1 <-pca.wo$l1[1,]
tmp2 <- as.numeric(pca.wo$l1)
tmp2 <- as.numeric(pca.wo$li)
tmp2 <- as.numeric(pca.wo$li[1,])
tmp1 <- as.numeric(pca.wo$l1[1,])
tmp1
tmp2
tmp2 / norm(tmp2)
?norm
tmp2 / norm(tmp2, type="2")
tmp2 / norm(tmp2, type="F")
tmp2 / norm(tmp2, type="f")
tmp1
tmp2 / norm(as.matrix(tmp2), type="f")
tmp2 / sqrt(sum(tmp2^2))
tmp1
?dudi.pca
library(umap)
library(ade4)
# library(FNN)
library(reshape2)
library(ape)
library(ggpubr)
library(foreach)
library(doParallel)
library(gridExtra)
library(eulerr)
library(viridis)
library(DESeq2)
library(RColorBrewer)
library(vsn)
library(factoextra)
?dudi.pca
?pca
?princomp
dim(pca.wo)
##=============================================
## principal components
##=============================================
pcs <- pca.wo$li
dim(pcs)
head(pcs)
pcs[1,]
source('~/Desktop/Cancer_Genomics/ImmuneProject/R/MESOMICS/pc_comp_all.R')
source('~/Desktop/Cancer_Genomics/ImmuneProject/R/MESOMICS/pc_comp_all.R')
source('~/Desktop/Cancer_Genomics/ImmuneProject/R/MESOMICS/pc_comp_wo_immune.R')
source('~/Desktop/Cancer_Genomics/ImmuneProject/R/MESOMICS/pc_comp_wo_immune.R')
head(pcs)
source('~/Desktop/Cancer_Genomics/ImmuneProject/R/MESOMICS/mosomics_all.R')
source('~/Desktop/Cancer_Genomics/ImmuneProject/R/MESOMICS/mosomics_wo_immune.R')
rm(list=ls())
rm(list=ls(envir=.RMEnv),envir=.RMEnv)
## ===============================================================================
marker.info <- read.table('~/Desktop/RM_prog/data/marker_positions.txt',
header=TRUE, as.is=TRUE)
## ===============================================================================
source("/Users/jaehee/Desktop/RM_prog/R/zzz.R")
source("/Users/jaehee/Desktop/RM_prog/R/setup.R")
setup(base.dir='/Users/jaehee/Desktop/RM_prog/twin_test',
# marker.f='/Users/jaehee/Desktop/RM_prog/data/marker_positions.txt',
bgl.jar='/Users/jaehee/Desktop/RM_prog/beagle.27Jan18.7e1.jar',
vcf.exe='/usr/local/bin/vcftools')
## ===============================================================================
source("/Users/jaehee/Desktop/RM_prog/R/proc_ref.R")
marker.f <- '/Users/jaehee/Desktop/RM_prog/data/marker_positions.txt'
marker.info <- read.table(marker.f, header=TRUE, as.is=TRUE)
# niterations=10
# nthreads=1
# lowmem='false'
# window=50000
# overlap=3000
# impute='true'
# cluster=0.005
# gprobs='false'
# ne=1000000
# err=0.0001
# seed=-99999
# modelscale=0.8
for (m in marker.info$name) {
ref.f <- file.path(.RMEnv$base.dir, paste('reference/ref_', m, '.vcf', sep=''))
phase.ref(ref.f)
ref.al.freq(ref.f, m)
}
source("/Users/jaehee/Desktop/RM_prog/R/imput_str.R")
for (i in 1:dim(marker.info)[2]) {
m <- marker.info$name[i]
chr <- marker.info$chr[i]
snp.f <- file.path(.RMEnv$base.dir, paste('SNP/snp_', m, '.vcf', sep=''))
ref.f <- file.path(.RMEnv$base.dir, paste('ref_phased/ref_', m, '_phs.vcf', sep=''))
map.f <- file.path(.RMEnv$base.dir, paste('plink.GRCh36.map/plink.chr', chr, '.GRCh36.map', sep=''))
impute.str(snp.f=snp.f, ref.f=ref.f, map.f=map.f, marker=m)
}
i
dim(marker.info)
source("/Users/jaehee/Desktop/RM_prog/R/imput_str.R")
for (i in 1:dim(marker.info)[1]) {
m <- marker.info$name[i]
chr <- marker.info$chr[i]
snp.f <- file.path(.RMEnv$base.dir, paste('SNP/snp_', m, '.vcf', sep=''))
ref.f <- file.path(.RMEnv$base.dir, paste('ref_phased/ref_', m, '_phs.vcf', sep=''))
map.f <- file.path(.RMEnv$base.dir, paste('plink.GRCh36.map/plink.chr', chr, '.GRCh36.map', sep=''))
impute.str(snp.f=snp.f, ref.f=ref.f, map.f=map.f, marker=m)
}
?file.path
?system.file
base.dir <- get("base.dir", envir=.RMEnv)
vcf.exe <- get("vcf.exe", envir=.RMEnv)
al.save.dir <- file.path(base.dir, 'ref_alfrq')
file.path(al.save.dir, paste('ref_', marker, sep=''))
marker=marker.info$name[1]
file.path(al.save.dir, paste('ref_', marker, sep=''))
system.file(al.save.dir, paste('ref_', marker, sep=''))
?tools::file_path_sans_ext
i <- installed.packages()
i[ i[,"Priority"] %in% c("base","recommended"), c("Package", "Priority")]
Package      Priority
?basename
source("/Users/jaehee/Desktop/RM_prog/R/imput_str.R")
for (i in 1:dim(marker.info)[1]) {
m <- marker.info$name[i]
chr <- marker.info$chr[i]
snp.f <- file.path(.RMEnv$base.dir, paste('SNP/snp_', m, '.vcf', sep=''))
ref.f <- file.path(.RMEnv$base.dir, paste('ref_phased/ref_', m, '_phs.vcf', sep=''))
map.f <- file.path(.RMEnv$base.dir, paste('plink.GRCh36.map/plink.chr', chr, '.GRCh36.map', sep=''))
impute.str(snp.f=snp.f, ref.f=ref.f, map.f=map.f, marker=m)
}
source("/Users/jaehee/Desktop/RM_prog/R/imput_str.R")
for (i in 1:dim(marker.info)[1]) {
m <- marker.info$name[i]
chr <- marker.info$chr[i]
snp.f <- file.path(.RMEnv$base.dir, paste('SNP/snp_', m, '.vcf', sep=''))
ref.f <- file.path(.RMEnv$base.dir, paste('ref_phased/ref_', m, '_phs.vcf', sep=''))
map.f <- file.path(.RMEnv$base.dir, paste('plink.GRCh36.map/plink.chr', chr, '.GRCh36.map', sep=''))
impute.str(snp.f=snp.f, ref.f=ref.f, map.f=map.f, marker=m)
}
i=1
m <- marker.info$name[i]
chr <- marker.info$chr[i]
snp.f <- file.path(.RMEnv$base.dir, paste('SNP/snp_', m, '.vcf', sep=''))
ref.f <- file.path(.RMEnv$base.dir, paste('ref_phased/ref_', m, '_phs.vcf', sep=''))
map.f <- file.path(.RMEnv$base.dir, paste('plink.GRCh36.map/plink.chr', chr, '.GRCh36.map', sep=''))
impute.str(snp.f=snp.f, ref.f=ref.f, map.f=map.f, marker=m)
impute.str(snp.f=snp.f, ref.f=ref.f, map.f=map.f, marker=m)
marker
base.dir <- get("base.dir", envir=.RMEnv)
imputed.save.dir <- file.path(base.dir, 'imputed_str')
out.pre2 <- file.path(imputed.save.dir, paste('imp_str', marker, sep=''))
out.pre <- file.path(imputed.save.dir,
paste(basename(tools::file_path_sans_ext(snp.f)),
'_imp', sep=''))
vcftools.str.1 <- paste("vcftools --vcf ", paste(out.pre, '.vcf', sep=''),
" --snp ", marker, " --recode --recode-INFO-all",
" --out ", out.pre, sep = "")
system(vcftools.str.1)
rm(list=ls())
rm(list=ls(envir=.RMEnv),envir=.RMEnv)
## ===============================================================================
marker.info <- read.table('~/Desktop/RM_prog/data/marker_positions.txt',
header=TRUE, as.is=TRUE)
## ===============================================================================
source("/Users/jaehee/Desktop/RM_prog/R/zzz.R")
source("/Users/jaehee/Desktop/RM_prog/R/setup.R")
setup(base.dir='/Users/jaehee/Desktop/RM_prog/twin_test',
# marker.f='/Users/jaehee/Desktop/RM_prog/data/marker_positions.txt',
bgl.jar='/Users/jaehee/Desktop/RM_prog/beagle.27Jan18.7e1.jar',
vcf.exe='/usr/local/bin/vcftools')
## ===============================================================================
source("/Users/jaehee/Desktop/RM_prog/R/proc_ref.R")
marker.f <- '/Users/jaehee/Desktop/RM_prog/data/marker_positions.txt'
marker.info <- read.table(marker.f, header=TRUE, as.is=TRUE)
## ===============================================================================
source("/Users/jaehee/Desktop/RM_prog/R/imput_str.R")
i=1
m <- marker.info$name[i]
chr <- marker.info$chr[i]
snp.f <- file.path(.RMEnv$base.dir, paste('SNP/snp_', m, '.vcf', sep=''))
ref.f <- file.path(.RMEnv$base.dir, paste('ref_phased/ref_', m, '_phs.vcf', sep=''))
map.f <- file.path(.RMEnv$base.dir, paste('plink.GRCh36.map/plink.chr', chr, '.GRCh36.map', sep=''))
impute.str(snp.f=snp.f, ref.f=ref.f, map.f=map.f, marker=m)
## ===============================================================================
source("/Users/jaehee/Desktop/RM_prog/R/imput_str.R")
for (i in 1:dim(marker.info)[1]) {
m <- marker.info$name[i]
chr <- marker.info$chr[i]
snp.f <- file.path(.RMEnv$base.dir, paste('SNP/snp_', m, '.vcf', sep=''))
ref.f <- file.path(.RMEnv$base.dir, paste('ref_phased/ref_', m, '_phs.vcf', sep=''))
map.f <- file.path(.RMEnv$base.dir, paste('plink.GRCh36.map/plink.chr', chr, '.GRCh36.map', sep=''))
impute.str(snp.f=snp.f, ref.f=ref.f, map.f=map.f, marker=m)
}
source("/Users/jaehee/Desktop/RM_prog/R/helper_func.R")
source("/Users/jaehee/Desktop/RM_prog/R/const_ibd_mat.R")
source("/Users/jaehee/Desktop/RM_prog/R/comp_match_score.R")
marker
marker = marker.info$name[1]
cott.vec <- c(0,0,1) # same individual
check.setup()
base.dir <- get("base.dir", envir=.RMEnv)
del.vec <- cott.to.jacq(cott.vec)
mat.save.dir <- paste(base.dir, 'result/', sep='')
if(!dir.exists(mat.save.dir)) {
dir.create(mat.save.dir)
}
# Allele frequency from training set
al.freq.filename <- file.path(base.dir,
paste('ref_alfrq/ref_', marker, '.frq', sep=''))
source("/Users/jaehee/Desktop/RM_prog/R/imput_str.R")
for (i in 1:dim(marker.info)[1]) {
m <- marker.info$name[i]
chr <- marker.info$chr[i]
snp.f <- file.path(.RMEnv$base.dir, paste('SNP/snp_', m, '.vcf', sep=''))
ref.f <- file.path(.RMEnv$base.dir, paste('ref_phased/ref_', m, '_phs.vcf', sep=''))
map.f <- file.path(.RMEnv$base.dir, paste('plink.GRCh36.map/plink.chr', chr, '.GRCh36.map', sep=''))
impute.str(snp.f=snp.f, ref.f=ref.f, map.f=map.f, marker=m)
}
source("/Users/jaehee/Desktop/RM_prog/R/imput_str.R")
for (i in 1:dim(marker.info)[1]) {
m <- marker.info$name[i]
chr <- marker.info$chr[i]
snp.f <- file.path(.RMEnv$base.dir, paste('SNP/snp_', m, '.vcf', sep=''))
ref.f <- file.path(.RMEnv$base.dir, paste('ref_phased/ref_', m, '_phs.vcf', sep=''))
map.f <- file.path(.RMEnv$base.dir, paste('plink.GRCh36.map/plink.chr', chr, '.GRCh36.map', sep=''))
impute.str(snp.f=snp.f, ref.f=ref.f, map.f=map.f, marker=m)
}
source("/Users/jaehee/Desktop/RM_prog/R/imput_str.R")
for (i in 1:dim(marker.info)[1]) {
m <- marker.info$name[i]
chr <- marker.info$chr[i]
snp.f <- file.path(.RMEnv$base.dir, paste('SNP/snp_', m, '.vcf', sep=''))
ref.f <- file.path(.RMEnv$base.dir, paste('ref_phased/ref_', m, '_phs.vcf', sep=''))
map.f <- file.path(.RMEnv$base.dir, paste('plink.GRCh36.map/plink.chr', chr, '.GRCh36.map', sep=''))
impute.str(snp.f=snp.f, ref.f=ref.f, map.f=map.f, marker=m)
}
check.setup()
base.dir <- get("base.dir", envir=.RMEnv)
del.vec <- cott.to.jacq(cott.vec)
mat.save.dir <- paste(base.dir, 'result/', sep='')
if(!dir.exists(mat.save.dir)) {
dir.create(mat.save.dir)
}
# Allele frequency from training set
al.freq.filename <- file.path(base.dir,
paste('ref_alfrq/ref_', marker, '.frq', sep=''))
gp.filename <- file.path(base.dir,
paste('imputed_str/imp_str_', marker, '.GP.FORMAT', sep=''))
gt.filename
# Matching genotype (known) for A
# gt.filename <- str.f
gt.filename <- file.path(base.dir,
paste('STR/imp_str_', marker, '.GP.FORMAT', sep=''))
gt.filename
val.gen.str.true <- read.gt(gt.filename)
val.str.true.ind <- apply(val.gen.str.true, 1, gt.to.ind)
n.ppl <- length(val.str.true.ind)
## Load allele frequencies from training set of A
al.freq <- read.al.freq(al.freq.filename)
al.freq.vec <- al.freq$al.freq
smallest.af <- al.freq$min.af
n.al <- length(al.freq.vec)
n.gen <- n.al * (n.al + 1) / 2
gt.filename
gt.filename <- file.path(base.dir,
paste('STR/imp_str_', marker, '.GT.FORMAT', sep=''))
## TRUE genotypes of A, i.e. known STR genotype, NOT from imputation.
## The missing STR genotype is represented with NA
val.gen.str.true <- read.gt(gt.filename)
val.str.true.ind <- apply(val.gen.str.true, 1, gt.to.ind)
n.ppl <- length(val.str.true.ind)
## Load allele frequencies from training set of A
al.freq <- read.al.freq(al.freq.filename)
al.freq.vec <- al.freq$al.freq
smallest.af <- al.freq$min.af
n.al <- length(al.freq.vec)
n.gen <- n.al * (n.al + 1) / 2
gt.filename
gt.filename <- file.path(base.dir,
paste('STR/str_', marker, '.GT.FORMAT', sep=''))
## TRUE genotypes of A, i.e. known STR genotype, NOT from imputation.
## The missing STR genotype is represented with NA
val.gen.str.true <- read.gt(gt.filename)
val.str.true.ind <- apply(val.gen.str.true, 1, gt.to.ind)
n.ppl <- length(val.str.true.ind)
## Load allele frequencies from training set of A
al.freq <- read.al.freq(al.freq.filename)
al.freq.vec <- al.freq$al.freq
smallest.af <- al.freq$min.af
n.al <- length(al.freq.vec)
n.gen <- n.al * (n.al + 1) / 2
## TRUE genotypes of A, i.e. known STR genotype, NOT from imputation.
## The missing STR genotype is represented with NA
val.gen.str.true <- read.gt(gt.filename)
val.str.true.ind <- apply(val.gen.str.true, 1, gt.to.ind)
n.ppl <- length(val.str.true.ind)
## Load allele frequencies from training set of A
al.freq <- read.al.freq(al.freq.filename)
al.freq.vec <- al.freq$al.freq
smallest.af <- al.freq$min.af
n.al <- length(al.freq.vec)
n.gen <- n.al * (n.al + 1) / 2
## Construct HW genotype frequency matrix of A based on
#  the training set allele frequencies of A
outer.mat <- outer(al.freq.vec, al.freq.vec)
hw.gf.mat <- 2 * outer.mat - diag(diag(outer.mat))
hw.gf.vec <- hw.gf.mat[!lower.tri(hw.gf.mat)] #GP in same order as BEAGLE output
hw.gf.min <- apply(cbind(hw.gf.vec, rep(0.0005, length(hw.gf.vec))),
1, min) #minimum values to be taken for imputation probabilities
unobserved.mat <- hw.gf.mat
unobserved.mat[hw.gf.mat >= (smallest.af^2)/10] <- 0
unobserved.mat[hw.gf.mat < (smallest.af^2)/10] <- 2
unobserved.vec <- unobserved.mat[!lower.tri(unobserved.mat)]
#vector with "2" everywhere with a genotype involving
#an allele unobserved in the training data.
## Step 1: Load BEAGLE imputed genotype probabilities from validation set,
#  P(R_Bl | S_Bl) and set imputation probabilities for anything
#  unobserved in training set to be 0, which will make the algorithm
#  reset them to the small value in gf.min
val.gp <- read.gp(gp.filename)
val.gp[ , unobserved.vec == 2] <- 0
## Step 2: Set imputation probabilities of genotypes unobserved in
#  the training set to be min(training set GF, 0.005) and normalize
#  imputatin probability vector to sum to 1.
hw.gf.min.mat <- matrix(rep(hw.gf.min, n.ppl), nrow=n.ppl, byrow=T)
scale.mat <- diag((1 - rowSums(hw.gf.min.mat * (val.gp == 0)))
/ rowSums(val.gp))
val.gp.scale <- scale.mat %*% val.gp
val.gp.scale[val.gp == 0] <- hw.gf.min.mat[val.gp == 0]
## Compute P(R_Al | S_Bl, Del)
ibd.term <- const.ibd.mat(al.freq.vec, del.vec)
bgl.term <- val.gp.scale
match.prob.mat <- bgl.term %*% ibd.term
rownames(match.prob.mat) <- paste('S', 'B', 1:n.ppl, sep='.')
# imagesc(match.prob.mat, xlab='Genotype A', ylab='Individuals')
if (any(is.na(match.prob.mat))) {
print(paste("marker:", marker.name))
stop("something went wrong in processing const.match.prob.mat function.")
}
conditional.llmat <- log(apply(match.prob.mat, 1, "[", i=val.str.true.ind))
train.gf <- matrix(rep(hw.gf.vec, n.ppl), nrow=n.ppl, byrow=T)
unconditional.llmat <- log(apply(train.gf, 1, "[", i=val.str.true.ind))
lrmat <- conditional.llmat - unconditional.llmat
lrmat[is.na(lrmat)] <- 0
save.name <- file.path(mat.save.dir, paste('llr_', marker, '.RData', sep=''))
save.name
mat.save.dir <- paste(base.dir, 'result', sep='')
if(!dir.exists(mat.save.dir)) {
dir.create(mat.save.dir)
}
mat.save.dir
mat.save.dir <- file.path(base.dir, 'result', sep='')
if(!dir.exists(mat.save.dir)) {
dir.create(mat.save.dir)
}
image(lrmat)
source("/Users/jaehee/Desktop/RM_prog/R/helper_func.R")
source("/Users/jaehee/Desktop/RM_prog/R/const_ibd_mat.R")
source("/Users/jaehee/Desktop/RM_prog/R/comp_match_score.R")
str.f <- '/Users/jaehee/Desktop/RM_prog/twin_test/STR/str_CSF1PO.GT.FORMAT'
marker <- 'CSF1PO'
cott.vec <- c(0,0,1) # same individual
# cott.vec <- c(0.25, 0.5, 0.25) # sib pairs
# cott.vec <- c(0,1,0) # parent-offspring
tmp <- comp.match.score(cott.vec=cott.vec, marker=marker, str.f=str.f)
tmp <- comp.match.mat(cott.vec=cott.vec, marker=marker, str.f=str.f)
image(tmp)
marker
m
llr.single.irt <- list()
for (i in 1:dim(marker.info)[1]) {
print(i)
m <- marker.info$name[i]
snp.f <- file.path(.RMEnv$base.dir, paste('STR/str_', m, '.GT.FORMAT', sep=''))
llr.single.irt[[i]] <- comp.match.mat(cott.vec=cott.vec, marker=m, str.f=str.f)
names(llr.single.irt)[i] <- marker.name
}
source("/Users/jaehee/Desktop/RM_prog/R/helper_func.R")
source("/Users/jaehee/Desktop/RM_prog/R/const_ibd_mat.R")
source("/Users/jaehee/Desktop/RM_prog/R/comp_match_score.R")
llr.single.irt <- list()
for (i in 1:dim(marker.info)[1]) {
m <- marker.info$name[i]
print(m)
snp.f <- file.path(.RMEnv$base.dir, paste('STR/str_', m, '.GT.FORMAT', sep=''))
llr.single.irt[[i]] <- comp.match.mat(cott.vec=cott.vec, marker=m, str.f=str.f)
names(llr.single.irt)[i] <- marker.name
}
source("/Users/jaehee/Desktop/RM_prog/R/helper_func.R")
source("/Users/jaehee/Desktop/RM_prog/R/const_ibd_mat.R")
source("/Users/jaehee/Desktop/RM_prog/R/comp_match_score.R")
llr.single.irt <- list()
for (i in 1:dim(marker.info)[1]) {
m <- marker.info$name[i]
print(m)
snp.f <- file.path(.RMEnv$base.dir, paste('STR/str_', m, '.GT.FORMAT', sep=''))
llr.single.irt[[i]] <- comp.match.mat(cott.vec=cott.vec, marker=m, str.f=str.f)
names(llr.single.irt)[i] <- marker.name
}
llr.single.irt <- list()
for (i in 1:dim(marker.info)[1]) {
m <- marker.info$name[i]
print(m)
snp.f <- file.path(.RMEnv$base.dir, paste('STR/str_', m, '.GT.FORMAT', sep=''))
llr.single.irt[[i]] <- comp.match.mat(cott.vec=cott.vec, marker=m, str.f=str.f)
names(llr.single.irt)[i] <- m
}
mat <- Reduce('+', llr.single.irt)
image(mat)
match.acc <- comp.match.acc(mat)
match.acc
paste(cott.vec, collapse="_")
paste(c(0.25, 0.5, 0.25), collapse="_")
gsub('.', '', paste(c(0.25, 0.5, 0.25), collapse="_"))
gsub('\\.', '', paste(c(0.25, 0.5, 0.25), collapse="_"))
source("/Users/jaehee/Desktop/RM_prog/R/helper_func.R")
source("/Users/jaehee/Desktop/RM_prog/R/const_ibd_mat.R")
source("/Users/jaehee/Desktop/RM_prog/R/comp_match_score.R")
str.f <- '/Users/jaehee/Desktop/RM_prog/twin_test/STR/str_CSF1PO.GT.FORMAT'
marker <- 'CSF1PO'
cott.vec <- c(0,0,1) # same individual
# cott.vec <- c(0.25, 0.5, 0.25) # sib pairs
# cott.vec <- c(0,1,0) # parent-offspring
tmp <- comp.match.mat(cott.vec=cott.vec, marker=marker, str.f=str.f)
str.f <- '/Users/jaehee/Desktop/RM_prog/twin_test/STR/str_CSF1PO.GT.FORMAT'
marker <- 'CSF1PO'
# cott.vec <- c(0,0,1) # same individual
cott.vec <- c(0.25, 0.5, 0.25) # sib pairs
# cott.vec <- c(0,1,0) # parent-offspring
llr.single.irt <- list()
for (i in 1:dim(marker.info)[1]) {
m <- marker.info$name[i]
print(c(as.character(i), m))
snp.f <- file.path(.RMEnv$base.dir, paste('STR/str_', m, '.GT.FORMAT', sep=''))
llr.single.irt[[i]] <- comp.match.mat(cott.vec=cott.vec, marker=m, str.f=str.f)
names(llr.single.irt)[i] <- m
}
mat <- Reduce('+', llr.single.irt)
image(mat)
comp.match.acc(mat)
# cott.vec <- c(0,0,1) # same individual
# cott.vec <- c(0.25, 0.5, 0.25) # sib pairs
cott.vec <- c(0,1,0) # parent-offspring
llr.single.irt <- list()
for (i in 1:dim(marker.info)[1]) {
m <- marker.info$name[i]
print(c(as.character(i), m))
snp.f <- file.path(.RMEnv$base.dir, paste('STR/str_', m, '.GT.FORMAT', sep=''))
llr.single.irt[[i]] <- comp.match.mat(cott.vec=cott.vec, marker=m, str.f=str.f)
names(llr.single.irt)[i] <- m
}
mat <- Reduce('+', llr.single.irt)
image(mat)
comp.match.acc(mat)
